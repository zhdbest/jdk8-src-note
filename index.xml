<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JDK8源码阅读笔记</title>
    <link>https://hongmao.run/jdk8-src-note/</link>
    <description>Recent content on JDK8源码阅读笔记</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Jun 2024 08:24:39 +0800</lastBuildDate>
    <atom:link href="https://hongmao.run/jdk8-src-note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ByteOrder</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/ByteOrder/</link>
      <pubDate>Tue, 11 Jun 2024 08:24:39 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/ByteOrder/</guid>
      <description>字节顺序的类型安全枚举。&#xA;1. private String name; 2. public static final ByteOrder BIG_ENDIAN = new ByteOrder(&amp;ldquo;BIG_ENDIAN&amp;rdquo;); 3. public static final ByteOrder LITTLE_ENDIAN = new ByteOrder(&amp;ldquo;LITTLE_ENDIAN&amp;rdquo;); 4. public static ByteOrder nativeOrder() 5. public String toString() 1. private String name; 字节顺序的名称。&#xA;2. public static final ByteOrder BIG_ENDIAN = new ByteOrder(&amp;ldquo;BIG_ENDIAN&amp;rdquo;); 表示大端字节序的常量。在这个顺序中，多字节值的字节从最高位到最低位排列。&#xA;3. public static final ByteOrder LITTLE_ENDIAN = new ByteOrder(&amp;ldquo;LITTLE_ENDIAN&amp;rdquo;); 表示小端字节序的常量。在这个顺序中，多字节值的字节从最低位到最高位排列。&#xA;4. public static ByteOrder nativeOrder() 获取底层平台的本地字节序。&#xA;定义此方法是为了使性能敏感的Java代码可以分配与硬件具有相同字节序的直接缓冲区。当使用这样的缓冲区时，本地代码库通常更高效。&#xA;该方法返回运行此Java虚拟机的硬件的本机字节序。&#xA;public static ByteOrder nativeOrder() { return Bits.</description>
    </item>
    <item>
      <title>ReadOnlyBufferException</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/ReadOnlyBufferException/</link>
      <pubDate>Mon, 03 Jun 2024 12:16:40 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/ReadOnlyBufferException/</guid>
      <description>1. public ReadOnlyBufferException() { } 在只读缓冲区上调用内容突变方法（如put或compact）时会引发此不受检查的异常。&#xA;1. public ReadOnlyBufferException() { } 构造此类的一个实例。</description>
    </item>
    <item>
      <title>InvalidMarkException</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/InvalidMarkException/</link>
      <pubDate>Mon, 03 Jun 2024 08:37:25 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/InvalidMarkException/</guid>
      <description>1. public InvalidMarkException() { } 在未定义缓冲区标记的情况下尝试重置缓冲区时会引发此不受检查的异常。&#xA;1. public InvalidMarkException() { } 构造此类的一个实例。</description>
    </item>
    <item>
      <title>BufferOverflowException</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/BufferOverflowException/</link>
      <pubDate>Thu, 30 May 2024 08:23:29 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/BufferOverflowException/</guid>
      <description>1. public BufferOverflowException() { } 当相对put操作达到目标缓冲区的限制时，会抛出此不受检查的异常。&#xA;1. public BufferOverflowException() { } 构造此类的一个实例。</description>
    </item>
    <item>
      <title>BufferUnderflowException</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/BufferUnderflowException/</link>
      <pubDate>Thu, 30 May 2024 08:22:41 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/BufferUnderflowException/</guid>
      <description>1. public BufferUnderflowException() { } 当相对get操作达到源缓冲区的限制时，会抛出此不受检查的异常。&#xA;1. public BufferUnderflowException() { } 构造此类的一个实例。</description>
    </item>
    <item>
      <title>ByteBuffer</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/ByteBuffer/</link>
      <pubDate>Wed, 29 May 2024 08:29:26 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/ByteBuffer/</guid>
      <description>1. final byte[] hb; 2. final int offset; 3. boolean isReadOnly; 4. ByteBuffer(int mark, int pos, int lim, int cap, byte[] hb, int offset) 5. ByteBuffer(int mark, int pos, int lim, int cap) 6. public static ByteBuffer allocateDirect(int capacity) 7. public static ByteBuffer allocate(int capacity) 8. public static ByteBuffer wrap(byte[] array, int offset, int length) 9. public static ByteBuffer wrap(byte[] array) 10. public abstract ByteBuffer slice(); 11. public abstract ByteBuffer duplicate(); 12.</description>
    </item>
    <item>
      <title>Buffer</title>
      <link>https://hongmao.run/jdk8-src-note/java/nio/Buffer/</link>
      <pubDate>Wed, 29 May 2024 08:21:54 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/nio/Buffer/</guid>
      <description>1. static final int SPLITERATOR_CHARACTERISTICS 2. private int mark = -1 3. private int position = 0 4. private int limit 5. private int capacity 6. long address 7. Buffer(int mark, int pos, int lim, int cap) 8. public final int capacity() 9. public final int position() 10. public final Buffer position(int newPosition) 11. public final int limit() 12. public final Buffer limit(int newLimit) 13. public final Buffer mark() 14.</description>
    </item>
    <item>
      <title>Closeable</title>
      <link>https://hongmao.run/jdk8-src-note/java/io/Closeable/</link>
      <pubDate>Mon, 27 May 2024 22:29:00 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/io/Closeable/</guid>
      <description>1. public void close() throws IOException; Closeable是数据的源或目的地，它可以被关闭。调用close方法是为了释放对象持有的资源（如打开的文件）。&#xA;1. public void close() throws IOException; 关闭此流，并释放与它关联的任何系统资源。如果流已经被关闭，那么调用这个方法将不会有任何影响。&#xA;正如在AutoCloseable.close()中所指出的，关闭操作可能失败的情况需要特别注意。强烈建议在抛出IOException之前，先释放底层资源，并在内部将Closeable标记为已关闭。</description>
    </item>
    <item>
      <title>AutoCloseable</title>
      <link>https://hongmao.run/jdk8-src-note/java/lang/AutoCloseable/</link>
      <pubDate>Fri, 24 May 2024 22:29:51 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/lang/AutoCloseable/</guid>
      <description>1. void close() throws Exception; 一个可能包含资源（比如文件或套接字句柄）的对象，在被关闭之前会一直持有这些资源。实现了AutoCloseable接口的对象，且该对象已在资源声明头部被声明，则该对象会在退出一个try-with-resources语句块时自动调用其close()方法。这种结构确保了及时释放资源，避免了资源耗尽异常以及可能发生的其他错误。&#xA;基类实现AutoCloseable接口是可以的，也是常见的情况，即使不是所有的子类或实例都会持有可释放的资源。对于那些需要完全泛化操作的代码，或者当知道AutoCloseable实例需要释放资源时，推荐使用try-with-resources语句。然而，在使用像java.util.stream.Stream这类同时支持基于I/O和非I/O形式的功能时，在采用非I/O形式时，通常不需要使用try-with-resources语句块。&#xA;1. void close() throws Exception; 关闭此资源，释放其持有的任何底层资源。这个方法会在由try-with-resources语句所管理的对象上自动调用。&#xA;尽管此接口方法声明可能会抛出异常，但强烈建议实现者声明具体的close方法以抛出更具体的异常，或者如果关闭操作不会失败，则根本不抛出异常。&#xA;关闭操作可能会失败的情况需要实现者特别注意。强烈建议在抛出异常之前先释放底层资源，并在内部将资源标记为已关闭。close方法不太可能会多次被调用，这样确保了资源能够及时释放。此外，这也减少了当资源包装其他资源或被其他资源包装时可能出现的问题。&#xA;强烈建议实现此接口的开发者也被不要让close方法抛出InterruptedException。&#xA;这个异常与线程的中断状态有关，如果InterruptedException被忽略，很可能会出现运行时的错误行为。&#xA;更一般地说，如果一个异常被忽略会引起问题，AutoCloseable的close方法就不应该抛出该异常。&#xA;请注意，与java.io.Closeable的close方法不同，这个close方法不要求是幂等的。换句话说，多次调用这个close方法可能会有一些可见的副作用，而Closeable的close如果多次调用则要求没有影响。&#xA;即便如此，仍强烈建议实现此接口的开发者使他们的close方法成为幂等的。</description>
    </item>
    <item>
      <title>Member</title>
      <link>https://hongmao.run/jdk8-src-note/java/lang/reflect/Member/</link>
      <pubDate>Mon, 17 Oct 2022 08:32:10 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/lang/reflect/Member/</guid>
      <description>1. public static final int PUBLIC = 0; 2. public static final int DECLARED = 1; 3. public Class getDeclaringClass(); 4. public String getName(); 5. public int getModifiers(); 6. public boolean isSynthetic(); Member是一个接口，在反射时标识单个成员（字段或方法）或构造函数的信息。&#xA;1. public static final int PUBLIC = 0; 标识类或接口的所有公共成员的集合，包括继承的成员。&#xA;2. public static final int DECLARED = 1; 标识类或接口的声明成员集合。继承的成员不包括在内。&#xA;3. public Class getDeclaringClass(); 返回一个Class对象，该对象表示由当前Member实例所代表的成员或构造函数的类或接口。&#xA;4. public String getName(); 返回此成员表示的基础成员或构造函数的简单名称。&#xA;5. public int getModifiers(); 以整数形式返回此成员表示的成员或构造函数的Java语言修饰符。Modifier类应用于解码整数的修饰符。&#xA;6. public boolean isSynthetic(); 如果此成员是由编译器引入的，则返回true，否则返回false。</description>
    </item>
    <item>
      <title>Resources</title>
      <link>https://hongmao.run/jdk8-src-note/javax/annotation/Resources/</link>
      <pubDate>Tue, 27 Sep 2022 08:40:07 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/javax/annotation/Resources/</guid>
      <description>1. Resource[] value(); 此类用于允许多个资源声明。&#xA;@Documented @Retention(RUNTIME) @Target(TYPE) public @interface Resources { } 1. Resource[] value(); 用于多个资源声明的数组。</description>
    </item>
    <item>
      <title>Resource</title>
      <link>https://hongmao.run/jdk8-src-note/javax/annotation/Resource/</link>
      <pubDate>Tue, 20 Sep 2022 19:08:20 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/javax/annotation/Resource/</guid>
      <description>1. String name() default &amp;ldquo;&amp;rdquo;; 2. String lookup() default &amp;ldquo;&amp;rdquo;; 3. Class type() default java.lang.Object.class; 4. enum AuthenticationType 5. AuthenticationType authenticationType() default AuthenticationType.CONTAINER; 6. boolean shareable() default true; 7. String mappedName() default &amp;ldquo;&amp;rdquo;; 8. String description() default &amp;ldquo;&amp;rdquo;; Resource注解用于标记一个资源是应用所需要的。该注解可能应用于某个应用组件类，或者组件类的属性或方法。当该注解用于某应用组件的属性或者方法时，容器会在初始化该组件时注入一个请求资源的实例到该组件。如果该注解应用于一个组件类，&#x9;该注解会定义一个资源，然后应用可能在运行时查找它。&#xA;尽管该注解没有被标记为Inherited，开发工具仍需检查所有组件类的超类，以发现超类中所有使用该注解的地方。这些注解表明应用组件需要这些资源。注意，这些组件可能出现在超类的私有属性或方法上，容器在这些场景下也需要执行注入。&#xA;@Target({TYPE, FIELD, METHOD}) @Retention(RUNTIME) public @interface Resource { } 1. String name() default &amp;ldquo;&amp;rdquo;; 资源的JNDI名称。该注解标注到到字段上时，默认值为字段名。标注到方法上时，默认值是与该方法对应的JavaBeans属性名。标注到类上时，没有默认值，该属性必须指定。&#xA;2. String lookup() default &amp;ldquo;&amp;rdquo;; 引用指向的资源的名称。它可以使用全局JNDI名称链接到任何兼容的资源。&#xA;3. Class type() default java.lang.Object.class; 资源的Java类型。该注解标注到字段上时，默认值是字段的类型。标注到方法上时，默认值是JavaBeans属性的类型。标注到类上时，没有默认值，该属性必须指定。&#xA;4. enum AuthenticationType 资源的两种可能的身份验证类型。</description>
    </item>
    <item>
      <title>AbstractMap</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/AbstractMap/</link>
      <pubDate>Sun, 26 Sep 2021 08:27:00 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/AbstractMap/</guid>
      <description>1. protected AbstractMap() 2. public int size() 3. public boolean isEmpty() 4. public boolean containsValue(Object value) 5. public boolean containsKey(Object key) 6. public V get(Object key) 7. public V put(K key, V value) 8. public V remove(Object key) 9. public void putAll(Map&amp;lt;? extends K, ? extends V&amp;gt; m) 10. public void clear() 11. transient Set&amp;lt;K&amp;gt; keySet; 12. transient Collection&amp;lt;V&amp;gt; values; 13. public Set&amp;lt;K&amp;gt; keySet() 14. public Collection&amp;lt;V&amp;gt; values() 15. public abstract Set&amp;lt;Entry&amp;lt;K,V&amp;raquo; entrySet(); 16.</description>
    </item>
    <item>
      <title>Vector</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/Vector/</link>
      <pubDate>Sun, 05 Sep 2021 10:21:41 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/Vector/</guid>
      <description>1. protected Object[] elementData; 2. protected int elementCount; 3. protected int capacityIncrement; 4. private static final long serialVersionUID = -2767605614048989439L; 5. public Vector(int initialCapacity, int capacityIncrement) 6. public Vector(int initialCapacity) 7. public Vector() 8. public Vector(Collection&amp;lt;? extends E&amp;gt; c) 9. public synchronized void copyInto(Object[] anArray) 10. public synchronized void trimToSize() 11. public synchronized void ensureCapacity(int minCapacity) 12. private void ensureCapacityHelper(int minCapacity) 13. private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; 14.</description>
    </item>
    <item>
      <title>Queue</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/Queue/</link>
      <pubDate>Sun, 05 Sep 2021 10:20:19 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/Queue/</guid>
      <description>1. boolean add(E e) 2. boolean offer(E e) 3. E remove() 4. E poll() 5. E element() 6. E peek() 设计用于在处理之前存放元素的集合。除了基本的Collection操作之外，队列还提供其他插入，提取和检查操作。这些方法均以两种形式存在：一种在操作失败时引发异常，另一种返回特殊值（null或false，具体取决于操作）。插入操作的后一种形式是专门为与有限容量的Queue实现一起使用而设计的；在大多数实现中，插入操作不会失败。&#xA;Queue方法摘要：&#xA;抛出异常 返回特殊值 插入 add(e) offer(e) 删除 remove() poll() 检索 element() peek() 队列通常但不一定以FIFO（先进先出）的方式对元素进行排序。例外情况包括优先级队列（根据提供的比较器对元素进行排序或元素的自然排序）和LIFO（后进先出）队列（或堆栈）。无论使用哪种排序，队列的head都是通过调用remove()或poll()来删除的元素。在FIFO队列中，所有新元素都插入到队列的尾部。其他种类的队列可能使用不同的放置规则。每个Queue实现都必须指定其排序属性。&#xA;offer方法在可能的情况下插入一个元素，否则返回false。这与Collection.add方法不同，该方法只能通过引发未经检查的异常来表示添加元素失败。offer方法被设计用于在正常情况下（而不是在例外情况下）发生故障（例如在固定容量（或“有界”）队列中）时使用。&#xA;remove()和poll()方法删除并返回队列的开头（head）。确切地说，从队列中删除哪个元素是队列的排序策略决定的，不同实现的实现方法不同。remove()和poll()方法的区别仅在于队列为空时它们的行为：remove()方法引发异常，而poll()方法返回null。&#xA;element()和peek()方法返回（但不删除）队列头（head）。&#xA;Queue接口未定义在并发编程中常见的阻塞队列方法。这些等待元素出现或空间可用的方法在java.util.concurrent.BlockingQueue接口中进行了定义，该接口扩展了Queue接口。&#xA;Queue实现通常不允许插入null元素，尽管某些实现（例如LinkedList）不禁止插入null。即使在允许的实现中，也不应将null插入Queue中，因为poll方法也将null用作特殊的返回值，以指示队列不包含任何元素。&#xA;Queue实现通常不定义equals和hashCode方法基于元素的版本，而是从类Object继承基于身份的版本，因为基于元素的相等性并不总是明确定义对于具有相同元素但排序属性不同的队列。&#xA;该接口也是Java集合框架的成员。&#xA;1. boolean add(E e) 如果可以立即将指定的元素插入此队列，而不会违反容量限制，则在成功后返回true，如果当前没有可用空间，则抛出IllegalStateException。&#xA;2. boolean offer(E e) 如果不会违反容量限制可以立即将指定的元素插入此队列。当使用容量受限的队列时，此方法通常比add更可取，后者插入元素时只能通过引发异常来标识无法插入。&#xA;3. E remove() 检索并删除此队列的头。此方法与poll的不同之处仅在于，如果此队列为空，它将引发异常。&#xA;4. E poll() 检索并删除此队列的开头，如果此队列为空，则返回null。&#xA;5. E element() 检索但不删除此队列的头。此方法与peek的不同之处仅在于，如果此队列为空，它将引发异常。&#xA;6. E peek() 检索但不删除此队列的开头，如果此队列为空，则返回null。</description>
    </item>
    <item>
      <title>LinkedList</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/LinkedList/</link>
      <pubDate>Sun, 05 Sep 2021 10:19:26 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/LinkedList/</guid>
      <description>1. transient int size = 0; 2. transient Node first; 3. transient Node last; 4. public LinkedList() 5. public LinkedList(Collection&amp;lt;? extends E&amp;gt; c) 6. private void linkFirst(E e) 7. void linkLast(E e) 8. void linkBefore(E e, Node succ) 9. private E unlinkFirst(Node f) 10. private E unlinkLast(Node l) 11. E unlink(Node x) 12. public E getFirst() 13. public E getLast() 14. public E removeFirst() 15. public E removeLast() 16. public void addFirst(E e) 17.</description>
    </item>
    <item>
      <title>Deque</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/Deque/</link>
      <pubDate>Sun, 05 Sep 2021 10:18:37 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/Deque/</guid>
      <description>1. void addFirst(E e) 2. void addLast(E e) 3. boolean offerFirst(E e) 4. boolean offerLast(E e) 5. E removeFirst() 6. E removeLast() 7. E pollFirst() 8. E pollLast() 9. E getFirst() 10. E getLast() 11. E peekFirst() 12. E peekLast() 13. boolean removeFirstOccurrence(Object o) 14. boolean removeLastOccurrence(Object o) 15. boolean add(E e) 16. boolean offer(E e) 17. E remove() 18. E poll() 19. E element() 20. E peek() 21. void push(E e) 22.</description>
    </item>
    <item>
      <title>ArrayList</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/ArrayList/</link>
      <pubDate>Sun, 05 Sep 2021 10:17:35 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/ArrayList/</guid>
      <description>1. private static final long serialVersionUID = 8683452581122892189L; 2. private static final int DEFAULT_CAPACITY = 10; 3. private static final Object[] EMPTY_ELEMENTDATA = {}; 4. private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; 5. transient Object[] elementData; 6. private int size; 7. public ArrayList(int initialCapacity) 8. public ArrayList() 9. public ArrayList(Collection&amp;lt;? extends E&amp;gt; c) 10. public void trimToSize() 11. public void ensureCapacity(int minCapacity) 12. private static int calculateCapacity(Object[] elementData, int minCapacity) 13.</description>
    </item>
    <item>
      <title>AbstractSequentialList</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/AbstractSequentialList/</link>
      <pubDate>Sun, 05 Sep 2021 10:16:58 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/AbstractSequentialList/</guid>
      <description>1. protected AbstractSequentialList() 2. public E get(int index) 3. public E set(int index, E element) 4. public void add(int index, E element) 5. public E remove(int index) 6. public boolean addAll(int index, Collection&amp;lt;? extends E&amp;gt; c) 7. public Iterator&amp;lt;E&amp;gt; iterator() 8. public abstract ListIterator&amp;lt;E&amp;gt; listIterator(int index); 此类提供List接口的基本实现，以减少实现支持“顺序访问”数据存储（例如链表）的该接口所需的工作。对于随机访问数据（例如数组），应优先使用AbstractList类。&#xA;该类与AbstractList类相反，因为它在列表的列表迭代器的顶部实现了“随机访问”方法（get(int index)，set(int index, E element)，add(int index, E element)，remove(int index)），而不是相反。&#xA;要实现一个列表，编程者仅需要扩展此类并为listIterator和size方法提供实现。对于不可修改的列表，编程者只需要实现列表迭代器的hasNext，next，hasPrevious，previous和index方法。&#xA;对于可修改的列表，编程者应该另外实现列表迭代器的set方法。对于可变大小的列表，程序员应该另外实现列表迭代器的remove和add方法。&#xA;根据Collection接口规范中的建议，编程者通常应提供一个void（无参数）和参数为Collection的构造函数。&#xA;该接口是Java集合框架的成员接口。&#xA;1. protected AbstractSequentialList() 唯一的构造函数。 （用于子类构造函数的调用，通常是隐式的。）&#xA;2. public E get(int index) 返回此列表中指定位置的元素。</description>
    </item>
    <item>
      <title>Map</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/Map/</link>
      <pubDate>Sun, 22 Aug 2021 09:06:42 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/Map/</guid>
      <description>1. int size(); 2. boolean isEmpty(); 3. boolean containsKey(Object key); 4. boolean containsValue(Object value); 5. V get(Object key); 6. V put(K key, V value); 7. V remove(Object key); 8. void putAll(Map&amp;lt;? extends K, ? extends V&amp;gt; m); 9. void clear(); 10. Set&amp;lt;K&amp;gt; keySet(); 11. Collection&amp;lt;V&amp;gt; values(); 12. Set&amp;lt;Map.Entry&amp;lt;K, V&amp;raquo; entrySet(); 13. interface Entry&amp;lt;K,V&amp;gt; 13.1 K getKey(); 13.2 V getValue(); 13.3 V setValue(V value); 13.4 boolean equals(Object o); 13.5 int hashCode(); 13.</description>
    </item>
    <item>
      <title>RandomAccess</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/RandomAccess/</link>
      <pubDate>Sat, 31 Jul 2021 10:32:17 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/RandomAccess/</guid>
      <description>List 接口的实现类所使用的标记接口，标识出它们支持快速（通常为恒定时间）随机访问。该接口的主要目的是允许通用算法更改其行为，以便在应用于随机访问或顺序访问列表时提供良好的性能。&#xA;当用于操纵随机访问列表（例如ArrayList）的最佳算法应用于顺序访问列表（例如LinkedList）时，会产生二次行为。鼓励通用的列表算法在应用一种算法（如果将其应用于顺序访问列表时会产生较差的性能）之前，检查给定列表是否为此接口的实例（通过instanceof判断），并在必要时更改其行为以确保可接受的性能。&#xA;公认的是，随机访问和顺序访问之间的区别通常是模糊的。例如，某些List实现会提供渐近线性的访问时间（如果它们变得很大），但实际上却是恒定的访问时间。这样的List实现通常应实现此接口。根据经验，对于类的典型实例，在以下场景下当循环1快于循环2时List实现应实现此接口：&#xA;循环1：&#xA;for (int i=0, n=list.size(); i &amp;lt; n; i++) list.get(i); 循环2：&#xA;for (Iterator i=list.iterator(); i.hasNext(); ) i.next(); 该接口也是Java集合框架成员。</description>
    </item>
    <item>
      <title>AbstractList</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/AbstractList/</link>
      <pubDate>Sun, 18 Jul 2021 18:23:58 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/AbstractList/</guid>
      <description>1. protected AbstractList() 2. public boolean add(E e) 3. abstract public E get(int index); 4. public E set(int index, E element) 5. public void add(int index, E element) 6. public E remove(int index) 7. public int indexOf(Object o) 8. public int lastIndexOf(Object o) 9. public void clear() 10. public boolean addAll(int index, Collection&amp;lt;? extends E&amp;gt; c) 11. public Iterator&amp;lt;E&amp;gt; iterator() 12. public ListIterator&amp;lt;E&amp;gt; listIterator() 13. public ListIterator&amp;lt;E&amp;gt; listIterator(final int index) 14.</description>
    </item>
    <item>
      <title>List</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/List/</link>
      <pubDate>Sun, 18 Jul 2021 18:23:47 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/List/</guid>
      <description>1. int size(); 2. boolean isEmpty(); 3. boolean contains(Object o); 4. Iterator&amp;lt;E&amp;gt; iterator(); 5. Object[] toArray(); 6. &amp;lt;T&amp;gt; T[] toArray(T[] a); 7. boolean add(E e); 8. boolean remove(Object o); 9. boolean containsAll(Collection c); 10. boolean addAll(Collection&amp;lt;? extends E&amp;gt; c); 11. boolean addAll(int index, Collection&amp;lt;? extends E&amp;gt; c); 12. boolean removeAll(Collection c); 13. boolean retainAll(Collection c); 14. default void replaceAll(UnaryOperator&amp;lt;E&amp;gt; operator) 15. default void sort(Comparator&amp;lt;? super E&amp;gt; c) 16. void clear(); 17.</description>
    </item>
    <item>
      <title>ListIterator</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/ListIterator/</link>
      <pubDate>Sun, 18 Jul 2021 18:23:38 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/ListIterator/</guid>
      <description>1. boolean hasNext(); 2. E next(); 3. boolean hasPrevious(); 4. E previous(); 5. int nextIndex(); 6. int previousIndex(); 7. void remove(); 8. void set(E e); 9. void add(E e); 列表的迭代器，允许编程者在任一方向上遍历列表，在迭代过程中修改列表，并获取迭代器在列表中的当前位置。ListIterator不持有当前元素，它的游标位置始终位于previous()返回的元素与next()返回的元素之间。 长度为n列表的迭代器具有n+1个可能的光标位置，如下面的插入符号（^）所示：&#xA;Element(0) Element(1) Element(2) ... Element(n-1) cursor positions: ^ ^ ^ ^ ^ 注意remove()和set(E e)方法不是根据光标位置定义的。它们被定义为对调用next()或previous()返回的最后一个元素进行操作。 该接口也是Java集合框架的成员接口。它继承于Iterator。&#xA;注：下文中提到的“前”和“后”定义为：&#xA;前：索引增大的方向 后：索引减小的方向 1. boolean hasNext(); 当按照前进的方向遍历一个数组时，如果当前列表迭代器还有其他元素时返回true。（换句话说，如果next()方法能返回一个元素而非抛出一个异常，则返回true）&#xA;2. E next(); 返回列表中的下一个元素并向前移动光标位置。 可以重复调用此方法以遍历列表，也可以将其与previous()混合调用。 （请注意，交替调用next()和previous()将重复返回相同的元素。） 当没有下一个元素时抛出NoSuchElementException。&#xA;3. boolean hasPrevious(); 当反向遍历列表时，如果列表迭代器还有其他元素，则返回true。（换句话说，当调用previous()时能返回一个元素而非抛出异常时，返回true）&#xA;4. E previous(); 返回列表中的前一个元素，并将光标位置向后移动。可以重复调用此方法以向后遍历列表，也可以将其与next()混合调用。 （请注意，交替调用next()和previous()将重复返回相同的元素。） 当没有上一个元素时抛出NoSuchElementException。</description>
    </item>
    <item>
      <title>Iterator</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/Iterator/</link>
      <pubDate>Sun, 18 Jul 2021 18:23:23 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/Iterator/</guid>
      <description>1. boolean hasNext() 2. E next() 3. default void remove() 4. default void forEachRemaining(Consumer&amp;lt;? super E&amp;gt; action) 集合上的迭代器。Iterator在Java集合框架中取代Enumeration。迭代器与枚举有两个不同之处：&#xA;迭代器允许调用者在迭代期间以明确的语义从基础集合中删除元素。 方法名已得到改进。 该接口也是Java集合框架的成员。&#xA;1. boolean hasNext() 如果当前迭代器包含更多元素，则返回true。（换句话说，如果调用next方法将返回一个元素而不是抛出异常，则返回true。）&#xA;2. E next() 返回当前迭代器的下一个元素，如果不存在，则抛出NoSuchElementException。&#xA;3. default void remove() 从基础集合中移除此迭代器返回的最后一个元素（可选操作）。每次调用next方法后只能调用此方法一次。如果在进行迭代时以任何方式修改基础集合，而不是调用此方法，则此时当前迭代器的行为将变得不确定。 可以看到该方法定义中有default关键字，其有一个默认实现，但是此默认执行仅抛出了一个UnsupportedOperationException，并无其他操作。 如果next方法还没有被调用，或者remove方法在最后一次调用next方法之后已经被调用过，则抛出IllegalStateException。&#xA;源码如下：&#xA;default void remove() { throw new UnsupportedOperationException(&amp;#34;remove&amp;#34;); } 4. default void forEachRemaining(Consumer&amp;lt;? super E&amp;gt; action) 对剩下的元素执行参数中指定的操作，直到所有元素（即剩下的所有元素）都被处理或者有异常抛出。如果指定了迭代的顺序，操作将按照迭代的顺序执行。 由action引发的异常会被转发给调用者。&#xA;源码如下：&#xA;default void forEachRemaining(Consumer&amp;lt;? super E&amp;gt; action) { Objects.requireNonNull(action); while (hasNext()) action.accept(next()); } 测试用例：&#xA;@Test public void testIterator() { List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); list.</description>
    </item>
    <item>
      <title>AbstractCollection</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/AbstractCollection/</link>
      <pubDate>Sun, 18 Jul 2021 18:22:49 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/AbstractCollection/</guid>
      <description>1. protected AbstractCollection() 2. public abstract Iterator&amp;lt;E&amp;gt; iterator(); 3. public abstract int size(); 4. public boolean isEmpty() 5. public boolean contains(Object o) 6. public Object[] toArray() 7. public &amp;lt;T&amp;gt; T[] toArray(T[] a) 8. private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; 9. private static &amp;lt;T&amp;gt; T[] finishToArray(T[] r, Iterator it) 10. private static int hugeCapacity(int minCapacity) 11. public boolean add(E e) 12. public boolean remove(Object o) 13. public boolean containsAll(Collection c) 14.</description>
    </item>
    <item>
      <title>Collection</title>
      <link>https://hongmao.run/jdk8-src-note/java/util/Collection/</link>
      <pubDate>Sun, 18 Jul 2021 14:38:11 +0800</pubDate>
      <guid>https://hongmao.run/jdk8-src-note/java/util/Collection/</guid>
      <description>1. int size() 2. boolean isEmpty() 3. boolean contains(Object o) 4. Iterator&amp;lt;E&amp;gt; iterator() 5. Object[] toArray() 6. &amp;lt;T&amp;gt; T[] toArray(T[] a) 7. boolean add(E e) 8. boolean remove(Object o) 9. boolean containsAll(Collection c) 10. boolean addAll(Collection&amp;lt;? extends E&amp;gt; c) 11. boolean removeAll(Collection c) 12. default boolean removeIf(Predicate&amp;lt;? super E&amp;gt; filter) 13. boolean retainAll(Collection c) 14. void clear() 15. boolean equals(Object o) 16. int hashCode() 17. default Spliterator&amp;lt;E&amp;gt; spliterator() 18. default Stream&amp;lt;E&amp;gt; stream() 19.</description>
    </item>
  </channel>
</rss>
